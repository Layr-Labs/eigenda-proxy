// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Layr-Labs/eigenda-proxy/store (interfaces: IRouter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	commitments "github.com/Layr-Labs/eigenda-proxy/commitments"
	store "github.com/Layr-Labs/eigenda-proxy/store"
	gomock "github.com/golang/mock/gomock"
)

// MockIRouter is a mock of IRouter interface.
type MockIRouter struct {
	ctrl     *gomock.Controller
	recorder *MockIRouterMockRecorder
}

// MockIRouterMockRecorder is the mock recorder for MockIRouter.
type MockIRouterMockRecorder struct {
	mock *MockIRouter
}

// NewMockIRouter creates a new mock instance.
func NewMockIRouter(ctrl *gomock.Controller) *MockIRouter {
	mock := &MockIRouter{ctrl: ctrl}
	mock.recorder = &MockIRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRouter) EXPECT() *MockIRouterMockRecorder {
	return m.recorder
}

// Caches mocks base method.
func (m *MockIRouter) Caches() []store.PrecomputedKeyStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Caches")
	ret0, _ := ret[0].([]store.PrecomputedKeyStore)
	return ret0
}

// Caches indicates an expected call of Caches.
func (mr *MockIRouterMockRecorder) Caches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Caches", reflect.TypeOf((*MockIRouter)(nil).Caches))
}

// Fallbacks mocks base method.
func (m *MockIRouter) Fallbacks() []store.PrecomputedKeyStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fallbacks")
	ret0, _ := ret[0].([]store.PrecomputedKeyStore)
	return ret0
}

// Fallbacks indicates an expected call of Fallbacks.
func (mr *MockIRouterMockRecorder) Fallbacks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fallbacks", reflect.TypeOf((*MockIRouter)(nil).Fallbacks))
}

// Get mocks base method.
func (m *MockIRouter) Get(arg0 context.Context, arg1 []byte, arg2 commitments.CommitmentMode) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRouterMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRouter)(nil).Get), arg0, arg1, arg2)
}

// GetEigenDAStore mocks base method.
func (m *MockIRouter) GetEigenDAStore() store.KeyGeneratedStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEigenDAStore")
	ret0, _ := ret[0].(store.KeyGeneratedStore)
	return ret0
}

// GetEigenDAStore indicates an expected call of GetEigenDAStore.
func (mr *MockIRouterMockRecorder) GetEigenDAStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEigenDAStore", reflect.TypeOf((*MockIRouter)(nil).GetEigenDAStore))
}

// GetS3Store mocks base method.
func (m *MockIRouter) GetS3Store() store.PrecomputedKeyStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetS3Store")
	ret0, _ := ret[0].(store.PrecomputedKeyStore)
	return ret0
}

// GetS3Store indicates an expected call of GetS3Store.
func (mr *MockIRouterMockRecorder) GetS3Store() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetS3Store", reflect.TypeOf((*MockIRouter)(nil).GetS3Store))
}

// Put mocks base method.
func (m *MockIRouter) Put(arg0 context.Context, arg1 commitments.CommitmentMode, arg2, arg3 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockIRouterMockRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIRouter)(nil).Put), arg0, arg1, arg2, arg3)
}
