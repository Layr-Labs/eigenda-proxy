# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.22)
# See https://zero-to-nix.com/start/init-flake/
{
  description = "eigenda-proxy flake";

  inputs = {
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*";
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";
    pre-commit-hooks.url = "github:cachix/pre-commit-hooks.nix";
    treefmt-nix.url = "github:numtide/treefmt-nix";
  };

  outputs =
    {
      self,
      flake-schemas,
      nixpkgs,
      pre-commit-hooks,
      treefmt-nix,
    }:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [
        "x86_64-linux"
        "aarch64-darwin"
        "x86_64-darwin"
        "aarch64-linux"
      ];
      forEachSupportedSystem =
        f:
        nixpkgs.lib.genAttrs supportedSystems (
          system:
          f {
            pkgs = import nixpkgs { inherit system; };
          }
        );

      # From https://github.com/numtide/treefmt-nix?tab=readme-ov-file#flakes
      # Eval the treefmt modules from ./treefmt.nix
      treefmtEval = forEachSupportedSystem ({ pkgs }: treefmt-nix.lib.evalModule pkgs ./treefmt.nix);

      # TODO: might want to use https://www.tweag.io/blog/2021-03-04-gomod2nix/ instead
      # See https://jameswillia.ms/posts/go-nix-containers.html
      buildEigenDAProxy =
        pkgs:
        pkgs.buildGoModule {
          pname = "eigenda-proxy";
          version = "v0.1.0";
          src = ./.;
          # This hash will need to change when go files are changed.
          # Also, make sure to stage the changes in git before running nix flake commands;
          # see https://github.com/NixOS/nix/issues/7107
          vendorHash = "sha256-WcTqUdamYOTb70Hi7kFRh3hEzI3LYr70eN+PlpRtlcY=";
          subPackages = [
            "cmd/server"
          ];
        };
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      # See # See https://determinate.systems/posts/flake-schemas/
      schemas = flake-schemas.schemas;

      # for `nix fmt`; See https://github.com/numtide/treefmt-nix?tab=readme-ov-file#flakes
      formatter = forEachSupportedSystem ({ pkgs }: treefmtEval.${pkgs.system}.config.build.wrapper);

      packages = forEachSupportedSystem (
        { pkgs }:
        rec {
          eigendaProxy = buildEigenDAProxy pkgs;
          default = eigendaProxy;
        }
      );

      # Development environments
      devShells = forEachSupportedSystem (
        { pkgs }:
        {
          default =
            let
              eigenda-proxy = buildEigenDAProxy pkgs;
              # See https://github.com/cachix/git-hooks.nix?tab=readme-ov-file#flakes-support
              pre-commit-check = pre-commit-hooks.lib.${pkgs.system}.run {
                src = ./.;
                hooks = {
                  # TODO: replace to use treefmt instead of random linters/fmters
                  golangci-lint.enable = true;
                };
              };
            in
            pkgs.mkShell {
              # Pinned packages available in the environment
              packages = with pkgs; [
                # nix stuff
                nixpkgs-fmt
                # generic tools
                curl
                jq
                git
                # golang + go tools
                go_1_22
                # need the override because golangci-lint is otherwise built with go1.23
                # which is not compatible with our pinned toolchain in go.mod
                # See https://github.com/NixOS/nixpkgs/issues/251099
                (golangci-lint.override { buildGoModule = pkgs.buildGo122Module; })
              ];

              # A hook run every time you enter the environment
              shellHook =
                pre-commit-check.shellHook
                + ''
                  echo "Welcome to the eigenda-proxy devShell!"
                '';
            };
        }
      );
    };
}
